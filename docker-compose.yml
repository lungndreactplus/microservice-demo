version: '3.8'

services:
  ## postgres Docker Compose Config
  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_DB: microservice-demo
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - ./volumes/postgres:/data/postgres
    expose:
      - "5431"
    ports:
      - "5431:5431"
    command: -p 5431
    restart: always
  ## Keycloak Config with Mysql database
  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:latest
    volumes:
      - ./volumes/mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:latest
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8181:8080"
    volumes:
      - ./volumes/keycloak/realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql

#  zookeeper:
#    image: confluentinc/cp-zookeeper:latest
#    container_name: zookeeper
#    ports:
#      - "2181:2181"
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
#    volumes:
#      - ./volumes/zookeeper_data:/var/lib/zookeeper
#  broker:
#    image: confluentinc/cp-kafka:latest
#    container_name: broker
#    hostname: broker
#    ports:
#      - "9092:9092"
#    depends_on:
#      - zookeeper
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
#    volumes:
#      - ./volumes/kafka_data:/var/lib/kafka

  broker:
    image: apache/kafka:3.7.0
    hostname: broker
    container_name: broker
    ports:
      - 9092:9092
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
      KAFKA_LISTENERS: CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      CLUSTER_ID: 4L6g3nShT-eMCtK--X86sw
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
  ## kafka ui

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8085:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - broker
#  kafka-ui:
#    container_name: kafka-ui
#    image: provectuslabs/kafka-ui:latest
#    ports:
#      - "8085:8085"
#    environment:
##      KAFKA_CLUSTERS_0_NAME: local
#      DYNAMIC_CONFIG_ENABLED: "true"
##      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092
##      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
##      KAFKA_AUTH_USERNAME: admin
##      KAFKA_AUTH_PASSWORD: admin
##      KAFKA_AUTH_ENABLED: true
#    volumes:
#      - ./volumes/config/dynamic_config.yaml:/etc/kafkaui/dynamic_config.yaml
#    depends_on:
#      - broker
  ## Zipkin
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"

  ## Eureka Server
  discovery-server:
    image: sp-microservice/discovery-server:latest
    container_name: discovery-server
    build:
      context: ./discovery-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin

  api-gateway:
    image: sp-microservice/api-gateway:latest
    build:
      context: ./api-gateway
    container_name: api-gateway
    ports:
      - "7080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
    depends_on:
      - zipkin
      - discovery-server
      - keycloak
  ## Product-Service Docker Compose Config
  product-service:
    container_name: product-service
    build:
      context: ./product-service
    image: sp-microservice/product-service:latest
    ports:
      - "7092:8082"  # Định nghĩa ánh xạ cổng host-to-container
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5431/microservice-demo #sử dụng tên của service trong Docker Compose để kết nối.
    depends_on:
      - postgres
      - discovery-server
      - api-gateway
    restart: always

  ## Order-Service Docker Compose Config
  order-service:
    container_name: order-service
    build:
      context: ./order-service # Thư mục chứa Dockerfile
    image: sp-microservice/order-service:latest
    ports:
      - "7091:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5431/microservice-demo #sử dụng tên của service trong Docker Compose để kết nối.
    depends_on:
      - postgres
      - zipkin
      - discovery-server
      - api-gateway
  ## Inventory-Service Docker Compose Config
  inventory-service:
    container_name: inventory-service
    build:
      context: ./inventory-service # Thư mục chứa Dockerfile
    image: sp-microservice/inventory-service:latest
    ports:
      - "7083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5431/microservice-demo
    depends_on:
      - postgres
      - discovery-server
      - api-gateway
  ## Notification-Service Docker Compose Config
  notification-service:
    container_name: notification-service
    build:
      context: ./notification-service
    ports:
      - "7084:8084"
    image: sp-microservice/notification-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin
      - broker
      - discovery-server
      - api-gateway
  ## Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - product-service
      - inventory-service
      - order-service
      - notification-service

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    links:
      - prometheus:prometheus
    volumes:
      - ./volumes/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
networks:
  kafka-net:
    driver: bridge
